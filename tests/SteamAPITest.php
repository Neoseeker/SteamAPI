<?php
/**
 * This is a PHPUnit test for the SteamAPI class
 * Generated by PHPUnit on 2011-08-24 at 08:01:54.
 */
class SteamAPITest extends PHPUnit_Framework_TestCase {
	static function setUpBeforeClass() {
		include '../SteamAPI.php';
		include '../SteamAPIDriver.php';
	}

	static function tearDownAfterClass() {
	}

	/**
	* Sets up the fixture, for example, opens a network connection.
	* This method is called before a test is executed.
	*/
	protected function setUp() {
	}

	/**
	* Tears down the fixture, for example, closes a network connection.
	* This method is called after a test is executed.
	*/
	protected function tearDown() {
	}

	function test_load_by_username() {
		$driver = new Neoseeker\SteamAPI\SteamAPIDriver;
		$api = new Neoseeker\SteamAPI\SteamAPI($driver);
		$api->load('tekmosis');
		$this->assertSame('76561197960550263', $api->information->steamID64);
		return $api;
	}

	function test_load_by_steamid64() {
		$driver = new Neoseeker\SteamAPI\SteamAPIDriver;
		$api = new Neoseeker\SteamAPI\SteamAPI($driver);
		$api->load(76561197960550263);
		$this->assertSame('76561197960550263', $api->information->steamID64);
	}

	function test_get_games() {
		$driver = $this->getMock('Neoseeker\SteamAPI\SteamAPIDriver', array('get_games_xml_url'));
		$driver->expects($this->any())->method('get_games_xml_url')->will($this->returnValue('xml/games.xml'));

		$api = new Neoseeker\SteamAPI\SteamAPI($driver);
		$api->load('tekmosis');
		$games = $api->get_games();

		$this->assertTrue(is_array($games));
		$this->assertSame(50, count($games));
		$this->assertSame('45740', $games[45740]->appID);
	}

	/**
	 * @depends test_get_games
	 */
	function test_get_achievements_for_game() {
		$driver = $this->getMock('Neoseeker\SteamAPI\SteamAPIDriver', array('get_stats_xml_url'));
		$driver->expects($this->any())->method('get_stats_xml_url')->will($this->returnValue('xml/stats.xml'));

		$api = new Neoseeker\SteamAPI\SteamAPI($driver);
		$api->load('tekmosis');
		$game= new stdClass();
		$game->statsLink = 'http://steamcommunity.com/id/tekmosis/stats/brink';
		$achievements = $api->get_achievements_for_game($game);
		$this->assertTrue(is_array($achievements));
		$this->assertTrue(array_key_exists('list', $achievements));
		$this->assertTrue(array_key_exists('completed', $achievements));
		$this->assertSame('achievement_77', $achievements['list']['achievement_77']->apiname);
		$this->assertSame(80, count($achievements['list']));
		$this->assertSame(48, count($achievements['completed']));
	}
}
?>